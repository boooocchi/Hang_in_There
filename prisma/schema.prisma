// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id  String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email String @unique
  emailVerified Boolean?
  userName String
  password String?
  googleSignin Boolean @default(false)
  limitEntries  LimitEntry[]
  pieces Piece[]
  wishList WishList[]
  dendoOutfits DendoOutfit[]
  accounts      Account[]
  sessions      Session[]
}
model LimitEntry {
  category   Categories
  value    Int
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  @@unique([userId, category], name: "userId_category")
}

model Piece{
  id  String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  itemName String 
  description String?
  color Colors
  category Categories
  brand String?
  price Float?
  imageUrl String
  userId String
  user User @relation(fields: [userId], references: [id])
  outfits DendoOutfit[]
}

model DendoOutfit{
  id  String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String 
  keywords String[]
  userId String
  pieces Piece[]
  user User @relation(fields: [userId], references: [id])
  imageUrl String?
  description String?
}

model WishList{
  id  String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  itemName String
  category Categories
  checked Boolean @default(false)
  userId String
  user User @relation(fields: [userId], references: [id])
}

enum Colors {
    BLACK
    WHITE
    GRAY
    BROWN
    BEIGE
    RED
    BLUE
    YELLOW
    GREEN
    ORANGE
    PURPLE
    PINK
    GOLD
    SILVER
    BRONZE
}

enum Categories {
        LIGHTTOPS
        HEAVYTOPS
        OUTERWEAR
        BOTTOMS
        SHOES
        ACCESSORIES
  }



  model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}